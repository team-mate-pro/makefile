git_status: ### [gs] Show working tree status
	git status

git_log: ### [gl] Show recent commit history (last 10 commits)
	git log --oneline --graph --decorate -n 10

git_log_all: ### [gla] Show detailed commit history with graph
	git log --oneline --graph --decorate --all -n 20

git_diff: ### [gd] Show unstaged changes
	git diff

git_diff_staged: ### [gds] Show staged changes
	git diff --cached

git_diff_branch: ### [gdb] Show differences between current branch and develop
	git diff develop

git_fetch: ### [gf] Fetch all branches from origin
	git fetch origin

git_pull: ### [gpl] Pull current branch from origin
	git pull origin

git_pull_develop: ### [gpld] Pull develop branch from origin
	git pull origin develop

git_pull_master: ### [gplm] Pull master branch from origin
	git pull origin master

git_branches: ### [gb] List all local branches
	git branch

git_branches_all: ### [gba] List all branches (local and remote)
	git branch -a

git_branches_remote: ### [gbr] List all remote branches
	git branch -r

git_branch_current: ### [gbc] Show current branch name
	git branch --show-current

git_branch_delete: ### [gbd] Delete local branch (usage: make git_branch_delete BRANCH=branch-name)
	@if [ -z "$(BRANCH)" ]; then echo "Usage: make git_branch_delete BRANCH=branch-name"; exit 1; fi
	git branch -d $(BRANCH)

git_branch_delete_force: ### [gbdf] Force delete local branch (usage: make git_branch_delete_force BRANCH=branch-name)
	@if [ -z "$(BRANCH)" ]; then echo "Usage: make git_branch_delete_force BRANCH=branch-name"; exit 1; fi
	git branch -D $(BRANCH)

git_checkout_develop: ### [gcd] Checkout develop branch
	git checkout develop

git_checkout_master: ### [gcm] Checkout master branch
	git checkout master

git_checkout: ### [gco] Checkout branch (usage: make git_checkout BRANCH=branch-name)
	@if [ -z "$(BRANCH)" ]; then echo "Usage: make git_checkout BRANCH=branch-name"; exit 1; fi
	git checkout $(BRANCH)

git_checkout_new: ### [gcon] Create and checkout new branch (usage: make git_checkout_new BRANCH=branch-name)
	@if [ -z "$(BRANCH)" ]; then echo "Usage: make git_checkout_new BRANCH=branch-name"; exit 1; fi
	git checkout -b $(BRANCH)

git_add_all: ### [gaa] Stage all changes
	git add .

git_add: ### [ga] Stage specific files (usage: make git_add FILES="file1 file2")
	@if [ -z "$(FILES)" ]; then echo "Usage: make git_add FILES=\"file1 file2\""; exit 1; fi
	git add $(FILES)

git_commit: ### [gc] Commit staged changes (usage: make git_commit MSG="commit message")
	@if [ -z "$(MSG)" ]; then echo "Usage: make git_commit MSG=\"commit message\""; exit 1; fi
	git commit -m "$(MSG)"

git_commit_amend: ### [gca] Amend last commit (keeps same message)
	git commit --amend --no-edit

git_commit_amend_msg: ### [gcam] Amend last commit with new message (usage: make git_commit_amend_msg MSG="new message")
	@if [ -z "$(MSG)" ]; then echo "Usage: make git_commit_amend_msg MSG=\"new message\""; exit 1; fi
	git commit --amend -m "$(MSG)"

git_push: ### [gp] Push current branch to origin
	git push origin HEAD

git_push_force: ### [gpf] Force push current branch with lease
	git push origin HEAD --force-with-lease

git_push_upstream: ### [gpu] Push current branch and set upstream
	git push -u origin HEAD

git_stash: ### [gst] Stash current changes
	git stash save

git_stash_list: ### [gstl] List all stashes
	git stash list

git_stash_pop: ### [gstp] Apply and remove most recent stash
	git stash pop

git_stash_apply: ### [gsta] Apply most recent stash (keep in stash list)
	git stash apply

git_stash_drop: ### [gstd] Drop most recent stash
	git stash drop

git_stash_clear: ### [gstc] Clear all stashes
	git stash clear

git_clean_dry: ### [gcld] Show what would be removed (dry run)
	git clean -fd --dry-run

git_clean: ### [gcl] Remove untracked files and directories
	git clean -fd

git_reset_soft: ### [grs] Soft reset to previous commit (keeps changes staged)
	git reset --soft HEAD~1

git_reset_hard: ### [grh] Hard reset to previous commit (discards all changes)
	git reset --hard HEAD~1

git_reset_origin: ### [gro] Reset current branch to match origin
	git fetch origin
	git reset --hard origin/$$(git branch --show-current)

git_undo_commit: ### [guc] Undo last commit but keep changes unstaged
	git reset HEAD~1

git_merge_develop: ### [gmd] Merge develop into current branch
	git merge develop

git_merge_master: ### [gmm] Merge master into current branch
	git merge master

git_merge_abort: ### [gma] Abort current merge
	git merge --abort

git_rebase_develop: ### [grd] Rebase current branch with origin/develop
	git fetch origin
	git rebase origin/develop

git_rebase_master: ### [grm] Rebase current branch with origin/master
	git fetch origin
	git rebase origin/master

git_rebase_continue: ### [grc] Continue rebase after resolving conflicts
	git rebase --continue

git_rebase_abort: ### [gra] Abort current rebase
	git rebase --abort

git_push_develop: ### [gpd] Push develop branch with force-with-lease
	git push origin develop --force-with-lease

git_push_master: ### [gpm] Push master branch with force-with-lease
	git push origin master --force-with-lease

git_tag_list: ### [gtl] List all tags
	git tag -l

git_tag_create: ### [gtc] Create new tag (usage: make git_tag_create TAG=v1.0.0)
	@if [ -z "$(TAG)" ]; then echo "Usage: make git_tag_create TAG=v1.0.0"; exit 1; fi
	git tag $(TAG)

git_tag_push: ### [gtp] Push specific tag to origin (usage: make git_tag_push TAG=v1.0.0)
	@if [ -z "$(TAG)" ]; then echo "Usage: make git_tag_push TAG=v1.0.0"; exit 1; fi
	git push origin $(TAG)

git_tag_push_all: ### [gtpa] Push all tags to origin
	git push origin --tags

git_tag_delete: ### [gtd] Delete local tag (usage: make git_tag_delete TAG=v1.0.0)
	@if [ -z "$(TAG)" ]; then echo "Usage: make git_tag_delete TAG=v1.0.0"; exit 1; fi
	git tag -d $(TAG)

git_remote_list: ### [grl] List all remote repositories
	git remote -v

git_prune: ### [gpr] Remove references to deleted remote branches
	git fetch --prune

git_authors: ### [gau] List all commit authors
	git log --format='%aN' | sort -u

git_stats: ### [gss] Show repository statistics
	@echo "=== Repository Statistics ==="
	@echo "Total commits: $$(git rev-list --count HEAD)"
	@echo "Total branches: $$(git branch -a | wc -l)"
	@echo "Total tags: $$(git tag | wc -l)"
	@echo "Total contributors: $$(git log --format='%aN' | sort -u | wc -l)"

git_last_commit: ### [glc] Show details of the last commit
	git log -1 --stat

git_whoami: ### [gwho] Show configured git user
	@echo "Name: $$(git config user.name)"
	@echo "Email: $$(git config user.email)"

# Aliases
gs: git_status
gl: git_log
gla: git_log_all
gd: git_diff
gds: git_diff_staged
gdb: git_diff_branch
gf: git_fetch
gpl: git_pull
gpld: git_pull_develop
gplm: git_pull_master
gb: git_branches
gba: git_branches_all
gbr: git_branches_remote
gbc: git_branch_current
gbd: git_branch_delete
gbdf: git_branch_delete_force
gcd: git_checkout_develop
gcm: git_checkout_master
gco: git_checkout
gcon: git_checkout_new
gaa: git_add_all
ga: git_add
gc: git_commit
gca: git_commit_amend
gcam: git_commit_amend_msg
gp: git_push
gpf: git_push_force
gpu: git_push_upstream
gst: git_stash
gstl: git_stash_list
gstp: git_stash_pop
gsta: git_stash_apply
gstd: git_stash_drop
gstc: git_stash_clear
gcld: git_clean_dry
gcl: git_clean
grs: git_reset_soft
grh: git_reset_hard
gro: git_reset_origin
guc: git_undo_commit
gmd: git_merge_develop
gmm: git_merge_master
gma: git_merge_abort
grd: git_rebase_develop
grm: git_rebase_master
grc: git_rebase_continue
gra: git_rebase_abort
gpd: git_push_develop
gpm: git_push_master
gtl: git_tag_list
gtc: git_tag_create
gtp: git_tag_push
gtpa: git_tag_push_all
gtd: git_tag_delete
grl: git_remote_list
gpr: git_prune
gau: git_authors
gss: git_stats
glc: git_last_commit
gwho: git_whoami
