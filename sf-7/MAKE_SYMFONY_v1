# Cache Management
sf_cache_clear: ### [scc] Clear Symfony cache (dev and test)
	$(docker-compose) exec ${main-container-name} php bin/console cache:clear
	$(docker-compose) exec ${main-container-name} php bin/console cache:clear --env=test

sf_cache_warmup: ### [scw] Warm up Symfony cache
	$(docker-compose) exec ${main-container-name} php bin/console cache:warmup
	$(docker-compose) exec ${main-container-name} php bin/console cache:warmup --env=test

sf_cache_pool_clear: ### [scpc] Clear specific cache pool (usage: make sf_cache_pool_clear POOL=doctrine.result_cache)
	@if [ -z "$(POOL)" ]; then echo "Usage: make sf_cache_pool_clear POOL=doctrine.result_cache"; exit 1; fi
	$(docker-compose) exec ${main-container-name} php bin/console cache:pool:clear $(POOL)

# Database - Migrations
sf_migrate: ### [smig] Run database migrations (dev and test)
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:migrations:migrate --no-interaction
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:migrations:migrate --env=test --no-interaction

sf_migrate_dev: ### [smigd] Run database migrations (dev only)
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:migrations:migrate --no-interaction

sf_migrate_test: ### [smigt] Run database migrations (test only)
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:migrations:migrate --env=test --no-interaction

sf_migrate_status: ### [smigs] Show migration status
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:migrations:status

sf_migrate_diff: ### [smigdiff] Generate migration from schema changes
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:migrations:diff --no-interaction

sf_migrate_generate: ### [smiggen] Generate blank migration
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:migrations:generate --no-interaction

sf_migrate_prev: ### [smigprev] Rollback to previous migration
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:migrations:migrate prev --no-interaction
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:migrations:migrate prev --env=test --no-interaction

sf_migrate_first: ### [smigfirst] Rollback to first migration
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:migrations:migrate first --no-interaction

sf_migrate_latest: ### [smiglat] Execute all pending migrations
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:migrations:migrate latest --no-interaction

# Database - Operations
sf_db_create: ### [sdbc] Create database (dev and test)
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:database:create
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:database:create --env=test

sf_db_drop: ### [sdbd] Drop database (dev and test)
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:database:drop --force --if-exists
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:database:drop --force --if-exists --env=test

sf_db_reload: ### [sdbr] Reload database (drop, create, migrate)
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:database:drop --force --if-exists --env=dev
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:database:create --env=dev
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:migrations:migrate --no-interaction --env=dev
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:database:drop --force --if-exists --env=test
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:database:create --env=test
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:migrations:migrate --no-interaction --env=test

sf_db_validate: ### [sdbv] Validate doctrine mapping
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:schema:validate --skip-sync

sf_schema_update: ### [ssu] Update database schema
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:schema:update --force --complete

# Fixtures
sf_fixtures_load: ### [sfix] Load Doctrine fixtures
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:fixtures:load --no-interaction

sf_fixtures_load_custom: ### [sfixc] Load fixtures with custom purger
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:fixtures:load --purger=custom_purger --group=new --no-interaction

sf_fixtures_load_test: ### [sfixt] Load fixtures for test environment
	$(docker-compose) exec ${main-container-name} php bin/console doctrine:fixtures:load --purger=custom_purger --group=new --no-interaction --env=test

# Debug Commands
sf_debug_router: ### [sdr] Show all routes
	$(docker-compose) exec ${main-container-name} php bin/console debug:router

sf_debug_route: ### [sdroute] Show route details (usage: make sf_debug_route NAME=app_product_show)
	@if [ -z "$(NAME)" ]; then echo "Usage: make sf_debug_route NAME=app_product_show"; exit 1; fi
	$(docker-compose) exec ${main-container-name} php bin/console debug:router $(NAME)

sf_debug_container: ### [sdc] Show services in container
	$(docker-compose) exec ${main-container-name} php bin/console debug:container

sf_debug_service: ### [sds] Show service details (usage: make sf_debug_service NAME=doctrine.orm.entity_manager)
	@if [ -z "$(NAME)" ]; then echo "Usage: make sf_debug_service NAME=doctrine.orm.entity_manager"; exit 1; fi
	$(docker-compose) exec ${main-container-name} php bin/console debug:container $(NAME)

sf_debug_config: ### [sdconf] Show configuration (usage: make sf_debug_config BUNDLE=framework)
	@if [ -z "$(BUNDLE)" ]; then \
		$(docker-compose) exec ${main-container-name} php bin/console debug:config; \
	else \
		$(docker-compose) exec ${main-container-name} php bin/console debug:config $(BUNDLE); \
	fi

sf_debug_autowiring: ### [sdaw] Show autowirable services
	$(docker-compose) exec ${main-container-name} php bin/console debug:autowiring

sf_debug_event_dispatcher: ### [sded] Show event listeners
	$(docker-compose) exec ${main-container-name} php bin/console debug:event-dispatcher

sf_debug_translation: ### [sdtrans] Show translation messages (usage: make sf_debug_translation LOCALE=pl)
	@if [ -z "$(LOCALE)" ]; then \
		$(docker-compose) exec ${main-container-name} php bin/console debug:translation; \
	else \
		$(docker-compose) exec ${main-container-name} php bin/console debug:translation $(LOCALE); \
	fi

sf_debug_twig: ### [sdtwig] Show twig functions and filters
	$(docker-compose) exec ${main-container-name} php bin/console debug:twig

# Assets
sf_assets_install: ### [sai] Install assets to public directory
	$(docker-compose) exec ${main-container-name} php bin/console assets:install --symlink public

# Security
sf_security_check: ### [ssec] Check security vulnerabilities
	$(docker-compose) exec ${main-container-name} php bin/console security:check

sf_user_password_hash: ### [suph] Hash user password (usage: make sf_user_password_hash PASS=secret123)
	@if [ -z "$(PASS)" ]; then echo "Usage: make sf_user_password_hash PASS=secret123"; exit 1; fi
	$(docker-compose) exec ${main-container-name} php bin/console security:hash-password $(PASS)

# Translations
sf_translation_extract: ### [strans] Extract translations (usage: make sf_translation_extract LOCALE=pl)
	@if [ -z "$(LOCALE)" ]; then echo "Usage: make sf_translation_extract LOCALE=pl"; exit 1; fi
	$(docker-compose) exec ${main-container-name} php bin/console translation:extract $(LOCALE) --force --format=yaml

sf_translation_update: ### [stransu] Update translations for all locales
	$(docker-compose) exec ${main-container-name} php bin/console translation:extract pl --force --format=yaml
	$(docker-compose) exec ${main-container-name} php bin/console translation:extract en --force --format=yaml

# Lint
sf_lint_yaml: ### [sly] Lint YAML files
	$(docker-compose) exec ${main-container-name} php bin/console lint:yaml config

sf_lint_twig: ### [slt] Lint Twig templates
	$(docker-compose) exec ${main-container-name} php bin/console lint:twig templates

sf_lint_container: ### [slc] Lint service container
	$(docker-compose) exec ${main-container-name} php bin/console lint:container

# Server & Development
sf_server_dump: ### [ssd] Run var-dumper server
	$(docker-compose) exec ${main-container-name} php bin/console server:dump

# Utilities
sf_list: ### [slist] List all available Symfony commands
	$(docker-compose) exec ${main-container-name} php bin/console list

sf_clear_logs: ### [scl] Clear log files
	$(docker-compose) exec ${main-container-name} rm -rf var/log/*.log

sf_clear_cache_all: ### [scca] Clear all cache and temp files
	$(docker-compose) exec ${main-container-name} rm -rf var/cache/* var/log/*

# Aliases
scc: sf_cache_clear
scw: sf_cache_warmup
scpc: sf_cache_pool_clear
smig: sf_migrate
smigd: sf_migrate_dev
smigt: sf_migrate_test
smigs: sf_migrate_status
smigdiff: sf_migrate_diff
smiggen: sf_migrate_generate
smigprev: sf_migrate_prev
smigfirst: sf_migrate_first
smiglat: sf_migrate_latest
sdbc: sf_db_create
sdbd: sf_db_drop
sdbr: sf_db_reload
sdbv: sf_db_validate
ssu: sf_schema_update
sfix: sf_fixtures_load
sfixc: sf_fixtures_load_custom
sfixt: sf_fixtures_load_test
sdr: sf_debug_router
sdroute: sf_debug_route
sdc: sf_debug_container
sds: sf_debug_service
sdconf: sf_debug_config
sdaw: sf_debug_autowiring
sded: sf_debug_event_dispatcher
sdtrans: sf_debug_translation
sdtwig: sf_debug_twig
sai: sf_assets_install
ssec: sf_security_check
suph: sf_user_password_hash
strans: sf_translation_extract
stransu: sf_translation_update
sly: sf_lint_yaml
slt: sf_lint_twig
slc: sf_lint_container
ssd: sf_server_dump
slist: sf_list
scl: sf_clear_logs
scca: sf_clear_cache_all
